


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-04",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>The solution to lab03 is available here:</p>",
  "folder" : "book",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Graphing individual variables",
    "shortTitle": "Lab-04",
    "contentMd" : "#Graphing individual variables\r\n\r\n\r\nThe solution to lab03 is available here:\r\n\r\n- [lab3 python file](./archives/lab03.py)\r\n\r\n- [lab3 step 2 python file](./archives/lab3_step2.py)\r\n"
    },
  
    {
    "title": "#Descriptive Statistics",
    "shortTitle": "01",
    "contentMd" : "#Descriptive Statistics\r\n\r\n\r\nThe first task is to write the code necessary to run frequency distributions for each of variables TAB12MDX and NUMCIGMO_EST, including both counts and percentages. You have done this previously using the value_counts function.\r\n\r\n- write this code now.\r\n\r\nAlso of interest would be the mean, median and standard deviation for both variables.\r\n\r\n- write this code now.\r\n\r\n![](./img/06.png)\r\n\r\nYou also write individual code commands for each statistical measure as shown below:\r\n\r\n~~~\r\n\r\nprint('mean')\r\nmean1 = subset2['NUMCIGMO_EST'].mean()\r\nprint(mean1)\r\n\r\nprint('std deviation')\r\nstd1 = subset2['NUMCIGMO_EST'].std()\r\nprint(std1)\r\n\r\nprint('min')\r\nmin1 = subset2['NUMCIGMO_EST'].min()\r\nprint(min1)\r\n\r\nprint('max')\r\nmax1 = subset2['NUMCIGMO_EST'].max()\r\nprint(max1)\r\n\r\nprint('median')\r\nmedian1 = subset2['NUMCIGMO_EST'].median()\r\nprint(median1)\r\n\r\nprint('mode')\r\nmode1 = subset2['NUMCIGMO_EST'].mode()\r\nprint(mode1)\r\n~~~\r\n\r\nN.B. in the output from this code you should note that the count is 1,697 rather than the 1706. This is because Python does not include those cases with missing or NaN data in these calculations.\r\n"
    },
  
    {
    "title": "#Univariate graphing",
    "shortTitle": "02",
    "contentMd" : "#Univariate graphing\r\n\r\nYou will begin by graphing one variable at a time and then multiple variables within the graphs.\r\n\r\nBar charts are most commonly used to examine the distribution of individual variables.\r\n\r\n![](./img/00.png)\r\n\r\nThis bar chart shows the distribution for the random sample of 1,200 college students who are asked, what is your perception of your body?\r\n\r\nIn this chart X or the horizontal axis includes the three response categories: underweight, overweight, and about right.\r\n\r\nThe height of each bar is measured on the Y or vertical axis, as the number or count of college students giving each response.\r\n\r\nThis next bar chart shows the same data but as a percentage of the total sample.\r\n\r\n![](./img/01.png)\r\n\r\nThe data we are going to visualise is from the NESARC data set. Variable TAB12MDX, representing diagnosis of nicotine dependence in the past 12 months. Along with the secondary variable you created in lab6 NUMCIGMO_EST, representing an estimate of the average number of cigarettes smoked per month.\r\n\r\n##In order to visualise in Python we need to import additional libraries into our program.\r\n\r\n~~~\r\n\r\nimport seaborn\r\nimport matplotlib.pyplot as plot\r\n\r\n~~~\r\n\r\nPython code will generate the graphs that help us learn more about the data and to make decisions about next steps in our research.\r\nThe focus to start with is basic visualisations rather than polished, presentation ready graphs.\r\n\r\nCategorical variables can be visualised one at a time using univariate graphs, that is with single variable bar charts.\r\n\r\nSo that categorical variables are ordered properly on the horizontal X axis, you must convert your categorical variables which are often formatted as numerical variables into a format Python recognises as categorical.\r\n\r\n~~~\r\n\r\nsubset2['TAB12MDX'] = subset2['TAB12MDX'].astype('category')\r\n\r\n~~~\r\n\r\nThe astype function converts TAB12MDX to a categorical variable, keeping the original name as is.\r\n\r\nThe basic code for a univariate graph of a categorical variable is as follows:\r\n\r\n~~~\r\n\r\nseaborn.countplot(x='TAB12MDX',data=subset2)\r\nplt.xlabel('Nicotine Dependence past 12 months')\r\nplt.title('Nicotine Dependence in the past 12 months among young adult smokers in the Nesarc study')\r\n\r\n\r\n~~~\r\n\r\n\r\nThe countplot function we name the categorical variable for the X axis and define the data frame, which in our case is subset2.\r\nWith the xlabel function we can label the X axis and with the title function we provide the bar chart with a title.\r\n\r\nSave and run this code.\r\n\r\n\r\n![](./img/02.png)\r\n\r\nThis bar chart show the 896 young adult smokers with nicotine dependence, as indicated by a response code of 1, and the 810 without nicotine dependence, indicated by a 0.\r\n\r\n##Univariate Histogram for quantitative variable:\r\n\r\nThe estimated number of cigarettes smoked per month is the variable NUMCIGMO_EST. This is a quantitative variable so the syntax we use is different.\r\n\r\n~~~\r\n\r\nseaborn.distplot(subset2['NUMCIGMO_EST'].dropna(),kde=False)\r\nplt.xlabel('Number of cigarettes per month')\r\nplt.title('Estimated number of cigarettes per month among young adult smokers in the Nesarc study')\r\n\r\n~~~\r\n\r\nWith the distribution plot function or distplot we name the quantitative variable for the X axis.\r\n\r\n\r\n##Exercises:\r\n\r\nWrite the code necessary to group the NUMCIGMO_EST variable into bins and count the frequency within each bin.\r\n\r\n![](./img/04.png)\r\n\r\nNext plot the new categorical variable  on a bar chart as below:\r\n\r\n![](./img/05.png)\r\n\r\nWhat do you think happens if you use the describe() function on the categorical variable TAB12MDX? Try it and see what the output is.\r\n\r\n\r\nYou will notice that charts that are produced \"inline\" in the iPython console window. It can be beneficial to set the charts to open in a separate window. Go to tools-preferences-ipython console- Graphics and set the Graphics backend to Automatic. Then restart the kernel by pressing Ctrl + . when in the console. When you run your code the graph will show in a separate window.\r\n\r\nThere seems to be an issue though with multiple graphs that each one overlays the previous. So for your CA I would therefore run each seaborn.countplot() separately and save each graph as an image to place in your CA report.\r\n"
    },
  
    {
    "title": "#Graphing categorical response variables",
    "shortTitle": "03",
    "contentMd" : "#Graphing categorical response variables\r\n\r\nOur research question is:\r\n\r\n## Does the number of cigarettes smoked per month determine Nicotine Dependence?\r\n\r\n- The first question to ask is what type is the response variable?\r\n\r\nIs it Categorical or Numerical?\r\n\r\nIn this case the response or dependent variable is Nicotine Dependence which is categorical.\r\n\r\nNext we need to determine how many categories are in this response variable.\r\n\r\nNicotine Dependence is coded 1 for yes, 0 for no, we have two categories.\r\n\r\n- The next question is what type is the explanatory variable?\r\n\r\nThe explanatory variable is the number of cigarettes smoked per month (NUMCIGMO_EST), this is a quantitative variable.\r\n\r\nPlacing a quantitative explanatory variable on the X axis is not visually meaningful where our response variable is categorical (Y axis). We would prefer to have categorical on the X axis.\r\n\r\n\r\nTherefore we must bin our explanatory variable into groups in order to visualise the relationship we are interested in. This requires some data management that will allow us to construct a categorical to categorical bar chart.\r\n\r\nBy default the Pandas library displays an abbreviated list of rows and columns from our data frame. We can add additional set option statements following the library import statement that requests a display of the max number of rows and columns.\r\n\r\n~~~\r\n\r\n#set PANDAS to show all columns in Data frame\r\npandas.set_option('display.max_columns', None)\r\n\r\n#set PANDAS to show all rows in Data frame\r\npandas.set_option('display.max_rows', None)\r\n\r\n~~~\r\n\r\nHaving viewed the full output for NUMCIGMO_EST we can use the cut function to group individuals in various ways. For example into quartiles or into custom groups.\r\n\r\nIn this case it makes sense to group based on quantities. Cigarette packs contain 20 cigarettes each. We can create a new variable that estimates the number of packs that each individual smokes per month, rather than the number of cigarettes.\r\n\r\nThe new variable is called PACKSPERMONTH and is equal to the variable NUMCIGMO_EST  divided by 20.\r\n\r\n~~~\r\n\r\n\r\nsubset2['PACKSPERMONTH'] = subset2['NUMCIGMO_EST'] / 20\r\n\r\nc5 = subset2.groupby('PACKSPERMONTH').size()\r\nprint(c5)\r\n\r\n~~~\r\n\r\n\r\n![](./img/07.png)\r\n\r\nPacks per month is still a quantitative variable, but now we can more easily create groups based on number of packs smoked in a month.\r\n\r\nAfter examining the frequency distribution, we will create groups that include those who've smoked 1-5 packs per month, 11-20, 21-30 and 30+ packs per month.\r\n\r\n~~~\r\n\r\nsubset2['PACKCATEGORY'] = pandas.cut(subset2.PACKSPERMONTH, [0,5,10,20,30,147])\r\n\r\n#change format of variable from numerical to Categorical\r\nsubset2['PACKCATEGORY'] = subset2['PACKCATEGORY'].astype('category')\r\n\r\nprint('describe nicotine dependence')\r\ndesc3 = subset2.groupby('PACKCATEGORY').size()\r\nprint(desc3)\r\n\r\n\r\n~~~\r\n\r\nNow we can make a category to category bar chart.\r\n\r\n~~~\r\n\r\n#bivariate bar chart\r\nseaborn.catplot(x='PACKCATEGORY',y='TAB12MDX',data=subset2, kind='bar',ci=None)\r\nplt.xlabel('Packs per month')\r\nplt.ylabel('Proportion Nicotine Dependence')\r\n\r\n~~~\r\n\r\n![](./img/08.png)\r\n\r\nTake a look at this chart and see if you understand the Nicotine Dependence variable.\r\n\r\nIn this case we know the response variable (TAB12MDX) is categorical, the catplot function by default calculates the mean where the response variable (Y axis) is categorical. this means it shows the proportion of individuals with nicotine dependence. This is because our variable stores either 1 or 0 so if all the 1's are added up and divided by the count then it gives the proportion. We know that Python will not calculate a mean if a variable is set to category. It is necessary to change the TAB12MDX to be numeric. This needs to be done prior to creating the bar chart. (you may already have a conversion written in your code from an earlier lab, if not here is the code below:)\r\n\r\n~~~\r\n\r\nsubset2['TAB12MDX'] = pandas.to_numeric(subset2['TAB12MDX'],errors='ignore')\r\n\r\n~~~\r\n\r\n\r\nIf we interpret the chart we can see that those individuals who smoke 1-5 packs a month only 25% of them are nicotine dependent. It is clear from the bar chart that the greater the number of packs smoked per month the higher the percentage of individuals that are classed as nicotine dependent.\r\n\r\nA relationship may exist between smoking and nicotine dependence as hypothesized.\r\n\r\nN.B if our explanatory variable (PACKSPERMONTH) was already categorical we could of skipped the step to cut() and created the factorplot.\r\n\r\nIf the response variable had more than two categories what would we need to do? We would need to collapse it into two categories. This is done in the next step.\r\n"
    },
  
    {
    "title": "#Bivariate graph with response variable containing more than 2 categories.",
    "shortTitle": "04",
    "contentMd" : "#Bivariate graph with response variable containing more than 2 categories.\r\n\r\nIf we modify our research question to look at the association between ethnicity and smoking stage.\r\n\r\nWe will create a response variable that categorises young adult smokers into three groups, Non-daily smokers, Daily smokers, and those with Nicotine Dependence.\r\n\r\nIn the code book the variable ETHRACE2A shows the categories and frequencies.\r\n\r\n![](./img/10.png)\r\n\r\nTo create the new variable called SMOKEGRP we will enter the following code:\r\n\r\n~~~\r\n\r\ndef SMOKEGRP (row):\r\n  if row['TAB12MDX'] == 1:\r\n    return 1\r\n  elif row['USFREQMO'] == 30:\r\n    return 2\r\n  else:\r\n    return 3\r\n\r\nsubset2['SMOKEGRP'] = subset2.apply(lambda row: SMOKEGRP (row), axis=1)\r\n\r\n~~~\r\nThe SMOKEGRP variable will hold 1 if the individual is nicotine dependent, 2 if they are a daily smoker and 3 for all other young adult smokers.\r\n\r\nIt is important to consider what categories you need to define and in what order to define them.\r\n\r\nLets see the percentage for each category:\r\n\r\n~~~\r\n\r\nc8=subset2['SMOKEGRP'].value_counts(normalize=True)\r\nprint(c8)\r\n\r\n~~~\r\n\r\nNow create a univariate bar chart for this new variable.\r\n\r\n![](./img/11.png)\r\n\r\nNow to investigate this variable with another we need to collapse it into two categories.\r\n\r\nTwo perfectly reasonable options are:\r\n\r\nExamine the association between ethnicity and daily versus non-daily smokers.\r\n\r\nOr\r\n\r\nExamine the association between ethnicity and nicotine dependent versus non-nicotine dependent individuals.\r\n\r\nIn either case, data management has to occur first.\r\n\r\nTo collapse the variable into daily and non-daily smokers we use the following:\r\n\r\n~~~\r\n\r\ndef DAILY (row):\r\n  if row['USFREQMO'] == 30:\r\n    return 1\r\n  elif row['USFREQMO'] != 30:\r\n    return 0\r\n\r\nsubset2['DAILY'] = subset2.apply(lambda row: DAILY (row), axis=1)\r\n\r\nc7= subset2.groupby('DAILY').size()\r\nprint(c7)\r\n~~~\r\n\r\nThis shows us that 1320 young adult are daily smokers and 386 are not daily smokers.\r\n\r\nNow we can graph the relationship between our categorical explanatory variable ETHRACE2A and this new response categorical variable DAILY.\r\n\r\nRemember our categorical response variable cannot have more than two categories or levels. Those categories should be coded as zero or one. Zero representing negative and one representing yes or positive. In this format the mean calculated for the y axis gives us the proportion of the positive observations.\r\n\r\n~~~\r\n\r\nseaborn.catplot(x='ETHRACE2A', y='DAILY', data=subset2, kind='bar', ci=None)\r\nplt.xlabel('Ethnic Group')\r\nplt.ylabel('Proportion Daily Smokers')\r\n\r\n~~~\r\n\r\n\r\n![](./img/12.png)\r\n\r\n\r\nNotice that the categories (1,2,3,4,5) are not ordered on the X axis, and because they are not labeled it is harder to interpret the bar chart.\r\n\r\nWe can rename categorical variable values for graphing, first by changing their format to categorical if you haven't already done so. Second by giving the variable ETHRACE2A new value labels using cat.rename_categories()\r\n\r\n\r\n~~~\r\n\r\nsubset2['ETHRACE2A'] = subset2['ETHRACE2A'].astype('category')\r\n\r\nsubset2['ETHRACE2A'] = subset2['ETHRACE2A'].cat.rename_categories(['White','Black','NatAm','Asian','Hispanic'])\r\n\r\n\r\n~~~\r\n\r\n\r\n![](./img/13.png)\r\n\r\nWe can see that the proportion (count of all the 1's in DAILY) of daily smokers for Native American's and Hispanic's is somewhat lower than other Ethnic races.\r\n\r\nBy running the following statement you can see the actual counts for daily and non daily smokers per ethnic group:\r\n\r\n~~~\r\nc9= subset2.groupby(['DAILY','ETHRACE2A']).size()\r\nprint(c7)\r\n~~~\r\n\r\n![](./img/14.png)\r\n"
    },
  
    {
    "title": "#continuous assessment",
    "shortTitle": "05",
    "contentMd" : "#continuous assessment\r\n\r\nApply what you have learned to your continuous assessment work.\r\n"
    }
  
  ]
  }

