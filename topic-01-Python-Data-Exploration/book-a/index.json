


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-01",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Python is an interpreted, object-oriented, high level programming language. Python&#39;s simple, easy to learn syntax emphasises readability. It supports packages and modules with several specifically designed for data analysis.</p>",
  "folder" : "book-a",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Introduction to Python",
    "shortTitle": "Lab-01",
    "contentMd" : "#Introduction to Python\r\n\r\nPython is an interpreted, object-oriented, high level programming language. Python's simple, easy to learn syntax emphasises readability. It supports packages and modules with several specifically designed for data analysis.\r\n\r\n#Credits\r\n\r\nThis uses Coursera data management and visualisation course, by Wesleyan university\r\n"
    },
  
    {
    "title": "#Datacamp Python course",
    "shortTitle": "01",
    "contentMd" : "#Datacamp Python course\r\n\r\nDataCamp offer many free online courses for learning data analysis. To start with the basics skills of the programming language Python you will start the Python course offered on DataCamp. Signup and login to begin the course. This module does not expect you to have this completed, it is simply a good starting point to pick up the basic skills to help with this module. You will be provided with the code you need to complete the lab work. However for the assignment it would be a good idea to improve your python skills beyond what the labs provide.\r\n\r\n<https://www.datacamp.com/learn-python-with-anaconda>\r\n\r\nAnother similar online course is provided by codeacademy.\r\n\r\n<https://www.codecademy.com/learn/python>\r\n\r\nThe data school website has some useful posts on python and the use of pandas for data analysis.\r\nHere is a good quick reference guide for python:\r\n\r\n<http://www.dataschool.io/python-quick-reference>\r\n"
    },
  
    {
    "title": "#Introduction to Python using Spyder",
    "shortTitle": "02",
    "contentMd" : "#Introduction to Python using Spyder\r\n\r\nPython is a programming language, and you'll be writing your Python code in the programming environment called Spyder. The Anaconda distribution simplifies the installation process by including Python, Spyder, and other packages and tools in one installation.\r\n\r\n![](./img/01.png)\r\n\r\n##Installing Anaconda\r\n\r\n- Go to <http://anaconda.com/download>\r\n- Scroll down to find your operating system\r\n\r\n![](./img/02.png)\r\n\r\n- For Windows, see <http://windows.microsoft.com/en-us/windows/32-bit-and-64-bit-windows> to find whether you computer has a 32-bit or 64-bit version of windows.\r\n- Click on the appropriate 32/64-bit installer of Python 3.7\r\n\r\n- For Mac OS download the graphical installer\r\n\r\n![](./img/03.png)\r\n\r\n- Save the file to your computer.\r\n- Double click on the downloaded file to open it.\r\n- Follow the on screen instructions, leaving options as they are currently set. This finishes the installation process.\r\n- Next check for updates using Conda. Conda is one of the extras that is installed through the distribution Anadconda. It handles things like updates, set-up, and package installation through a command line interface. If there are many updates this can take 10 minutes or more.\r\n\r\n##Windows\r\n- Open Anaconda Command Prompt by typing Anaconda in the search box in the start menu.\r\n- Type \"conda update conda\" at the command prompt, typing \"y\" for Yes and then pressing enter when it asks you to proceed. Your installation may identify different packages that you need updated.\r\n\r\n![](./img/05.png)\r\n\r\n- After it completes, type \"conda update anaconda\" at the command prompt. If it prompts you to proceed, type \"Y\" for Yes and press enter.\r\n- After that type \"conda install seaborn\" and \"Y\" again.\r\n- After that completes, you can then close the command prompt window.\r\n\r\n\r\n##MAC\r\n- Open Terminal.\r\n- Type \"conda update conda\" at the command prompt, typing \"y\" for Yes and then pressing enter when it asks you to proceed. Your installation may identify different packages that you need updated.\r\n\r\n![](./img/05.png)\r\n\r\n- After it completes, type \"conda update anaconda\" at the command prompt. If it prompts you to proceed, type \"Y\" for Yes and press enter.\r\n- After that type \"conda install seaborn\" and \"Y\" again.\r\n- After that compeltes, you can then close the command prompt window.\r\n"
    },
  
    {
    "title": "#Getting to know Spyder",
    "shortTitle": "03",
    "contentMd" : "#Getting to know Spyder\r\n\r\nYou will write your programs and run them inside the Spyder IDE.\r\n\r\n![](./img/06.png)\r\n\r\nOn Windows, in the search box on the start menu, type Spyder. Click on the program.\r\nOn a Mac, use Spotlight to find the program Launcher. Click Launch on the Spyder-app entry.\r\n\r\nAfter Spyder has launched you should see an interface that is organised into multiple windows (marked with red rectangles below) each of which has multiple tabs (marked with green rectangles below).\r\n\r\n![](./img/07.png)\r\n\r\nThe default screen has three windows visible: Editor, Inspector, and Console.\r\nIf you accidently close a window or change the layout, you can revert to the default by clicking \"View\" on the menu bar and then clicking \"Reuse Previous Layout\" or in \"Panes\" choose the pane you just accidently closed.\r\n\r\n- Editor: where you write and save sequences of commands, essentially where you will write your full program. In the sample that shows in the editor, anything after # is a comment, meaning that Python will ignore that text. Three double quotation marks are a special type of comment that spans multiple lines.\r\n\r\n- Console: where Python runs your code.  Spyder offers two choices for a console, a basic one and an IPython (Interactive Python) console. It is the IPython console we want to use. The prompt (where you can type in a command) for an IPython console is :\r\n\r\n![](./img/08.png)\r\n\r\n- Object Ispector: On starting Spyder, the object inspector just gives you a link to the tutorial (this can be useful if you want to know more details about using Spyder). The rest of the time, this window will continue to give you information about a function such as the documentation from the help files and tells you what parameters the function takes.\r\n\r\n- Variable Explorer: shows you the value and type of any variables you have created. This is useful when you are trying to debug your code.\r\n"
    },
  
    {
    "title": "#Editing",
    "shortTitle": "04",
    "contentMd" : "#Editing\r\n\r\nThe first task is to set your working directory. This is done by clicking on the folder icon in the top right corner above the object inspector.\r\n\r\n![](./img/09.png)\r\n\r\nBrowse to the folder where you wish to keep all of your python files and data files. This is the folder from which python files are executed and where you can import and run data sets.\r\n\r\nThe program/script editor works similar to other editors as well as colour coding your program to help you write and debug it.\r\n\r\n- Blue font indicates a Python keyword.\r\n- Dark red are for numbers.\r\n- Green is used for strings.\r\n- Purple is used for a value in an option value pair or is a function.\r\n- Grey font indicates comments about the program.\r\n\r\n![](./img/11.png)\r\n\r\nStrings in Python consists of alphanumeric or other characters enclosed by single or double quotation marks.\r\n\r\nComments start with a number sign `#` or a `Â£` symbol and they are not analysed by Python.\r\n\r\nIf you write a line of code that is incorrect, you will probably be provided with an exclamation point and a red circle ot the left of a line or lines of code. Hovering over the exclamation point with your mouse provides code analysis and helps you to debug your program.\r\n\r\nSometimes the analysis is helpful and other times it simply indicates that you have written invalid syntax.\r\n\r\nPython is case sensitive, so be sure to always use the correct capitalisation when you write your programs.\r\n\r\n![](./img/10.png)\r\n\r\n\r\n##Writing your first program\r\n\r\nAs the first line of your Python program, you will need to import any libraries that you will be using to conduct data analysis. Common libraries used for data analysis in Python include Pandas and NumPy.\r\n\r\n~~~\r\n\r\nimport pandas\r\nimport numpy\r\n\r\n~~~\r\n\r\nIn the blank editor type in the two import statements.\r\n\r\nLibraries, sometimes called packages, are collections of Python functions that others have written to add on to the basic functionality that is built into Python.\r\n\r\nNext are a few basic steps that all statistical packages require when you begin to write a program.\r\n\r\nFirst you will load the data that you'll be working with, which is the common form of a comma separated values file and has the extension .csv. This step is also sometimes called reading in or calling in the data set.\r\n\r\nTo load in data you first must download the file.\r\n\r\n[nesarc file](./archives/nesarc_pds.rar)\r\n\r\nSave the file into the working directory you setup in this step.\r\n\r\n[nesarc codebook](./archives/NESARC_codebook.pdf)\r\nEnter the following code to load the data file:\r\n\r\n~~~\r\n\r\nnesarc_data = pandas.read_csv('nesarc_pds.csv', low_memory=False)\r\n\r\n~~~\r\n\r\nnesarc_data is the name I have chosen to call our data frame (Python object). You can call it anything you wish, throughout this and future labs we will use the name nesarc_data. We set the data frame equal to the function pandas.read_csv to tell python that we will be reading in a .csv file using the Pandas library.\r\n\r\nIn Python function names are followed by a set of ().\r\n\r\nThe name of the data file nesarc_pds.csv is included within the parenthesis, and also within either single or double quotation marks. The name of the data set must match exactly the actual file name.\r\n\r\nIt is a good idea to add parameter low_memory and set it to false. Without this it is common to get a warning when you run your program because Pandas tries to determine what data type to set for each variable by analyzing the data in each column, this uses a lot of memory. Setting this parameter can increase efficiency when running the program.\r\n\r\nAll of the code you write after this line will use this data set.\r\n\r\nSave the program by choosing File->Save. The default name is Untitled but you should rename it Lab04. It will be saved to the working directory.\r\n\r\nAdd the following code and we can see the number of rows (observations/individuals) in the data set, and the number of columns, that is variables.\r\n\r\n~~~\r\nprint (len(nesarc_data)) #number of observations (rows)\r\nprint (len(nesarc_data.columns)) # number of variables (columns)\r\n\r\n~~~\r\n![](./img/12.png)\r\n\r\nIf we save and run this program by highlighting the code and selecting, run selection or current line within the Run menu, you can see here that Nesarc includeds 3,008 variables measured on 43,093 individual participants.\r\n\r\n![](./img/13.png)\r\n"
    },
  
    {
    "title": "#Frequency distribution",
    "shortTitle": "05",
    "contentMd" : "#Frequency distribution\r\n\r\nI'm interested in looking at the association between how much a person smokes, that is the quantity and frequency of smoking, and the presence or absence of nicotine dependence.\r\n\r\nTo investigate this we need to look in detail at the code book for the nesarc data set.\r\n\r\n- [NESARC Code Book](./archives/NESARC-Code-Book.pdf)\r\n\r\nThis document contains a table of contents that sets out the different sections of interest within the dataset. For this lab we will be looking at section 3A or page 82 for Tobacco use and dependence. It describes each variable associated to Tobacco use and dependence. The final section of the code book also provides information on diagnosis such as nicotine dependence.\r\n\r\nIt is the name of the variable (e.g. S3AQ1A) we are interested in rather than the longer descriptive name (e.g. Ever Smoked 100+ Cigarettes). For each variable the code book also shows you the counts for each possible value per variable. For example for S3AQ1A the possible values are from 5 to 80, 99 means an unknown age, and BL or blank is not applicable or unknown.\r\n\r\n\r\n![](./img/14.png)\r\n\r\nTo generate frequency distributions we use the value counts function. It is part of the Panda's library. We always need to load this library each time you run Python in order to use the function. We have done this already in the first line of the program.\r\n\r\nUse the value counts function to generate frequency counts for the nicotine dependence in the last 12 months variable (TAB12MDX):\r\n\r\n~~~\r\n\r\nc1= nesarc_data[\"TAB12MDX\"].value_counts(sort=False)\r\n\r\n~~~\r\n\r\nThis statement uses the value_counts function to generate a frequency count for the variable called TAB12MDX (surrounded by single or double quotation marks wihtin square brackets) in the nesarc_data set. It places the analysis in the variable c1. Each variable only exists as part of a data set so we must tell python what data set we are analysing. Dot notation should familiar to you.\r\nFunctions allow settings to be specified inside the parenthesis, this function includes sort=False so that the data is sorted in the order of the original values rather than by the actual counts.\r\n\r\nTo get percentages for each value based on those counts. The code is similar, we can the new variable p1 and we also include the setting normalize-True within the functions parenthesis separated by a comma.\r\n\r\n~~~\r\n\r\np1= nesarc_data[\"TAB12MDX\"].value_counts(sort=False, normalize=True)\r\n\r\n~~~\r\n\r\nTo get counts or percentages for each variable we are interested in separate lines of code need to be written. We should also pair each line of code with a print line of code.\r\n\r\n~~~\r\n\r\nc1= nesarc_data[\"TAB12MDX\"].value_counts(sort=False)\r\nprint (c1)\r\np1= nesarc_data[\"TAB12MDX\"].value_counts(sort=False, normalize=True)\r\nprint (p1)\r\n\r\n~~~\r\n\r\nSave and run this program.\r\n\r\nYou can confirm  the correct counts by looking in the code book for the variable TAB12MDX (page 475).\r\n\r\n##Exercises\r\n\r\nNow write the code necessary to find the counts and percentages for the following variables:\r\n\r\n- CHECK321\r\n- S3AQ3B1\r\n- S3AQ3C1\r\n\r\nRead in your code book to see what these variables relate to.\r\n\r\nFrom the File menu choose Save and then Run from the Run menu.\r\n"
    },
  
    {
    "title": "#Frequencies",
    "shortTitle": "06",
    "contentMd" : "#Frequencies\r\n\r\nYour code from the previous step should look like this:\r\n\r\n~~~\r\n\r\nc1= nesarc_data[\"TAB12MDX\"].value_counts(sort=False)\r\nprint (c1)\r\n\r\np1= nesarc_data[\"TAB12MDX\"].value_counts(sort=False, normalize=True)\r\nprint (p1)\r\n\r\nc2= nesarc_data[\"CHECK321\"].value_counts(sort=False)\r\nprint (c2)\r\n\r\np2= nesarc_data[\"CHECK321\"].value_counts(sort=False, normalize=True)\r\nprint (p2)\r\n\r\nc3= nesarc_data[\"S3AQ3B1\"].value_counts(sort=False)\r\nprint (c3)\r\n\r\np3= nesarc_data[\"S3AQ3B1\"].value_counts(sort=False, normalize=True)\r\nprint (p3)\r\n\r\nc4= nesarc_data[\"S3AQ3C1\"].value_counts(sort=False)\r\nprint (c4)\r\n\r\np4= nesarc_data[\"S3AQ3C1\"].value_counts(sort=False, normalize=True)\r\nprint (p4)\r\n\r\n\r\n~~~\r\n\r\n##Readability of Output\r\n\r\nWhen you run this code the distribution counts and percentages will be displayed in the console window. It is not very easy to determine one variable from the next. To help with the output for the reader it is useful to place a further print line of code before the counts and percentages are printed out.\r\n\r\n~~~\r\nprint('counts for TAB12MDX - nicotine dependence in the past 12 months, yes=1')\r\n~~~\r\n\r\nThis line of code should be placed just before the first line seen above.\r\n\r\nDo this now for each variable c2, p2, c3, p3, c4 and p4. Use the code book to find the long description for each variable.\r\n\r\nSave your work. Test this by highlighting just the last three lines of code and choose run selection or current from the run menu.\r\n\r\n![](./img/15.png)\r\n\r\nYou should now see just the 'percentages for S3AQ3C1 - usual quantity when smoke cigarettes' with the percentages shown for each quantity.\r\n\r\nAs with most programming languages there are multiple ways of doing the same task. We could use the function groupby instead of value_counts.\r\n\r\n~~~\r\n\r\nct1 = nesarc_data.groupby('TAB12MDX').size()\r\nprint(ct1)\r\n\r\n~~~\r\n\r\nThis will output the counts grouped by the values in the Nicotine Dependence variable TAB12MDX which we know to be 0 and 1\r\n\r\n![](./img/18.png)\r\n\r\nTo ask for the percentages with the groupby counts, the code is similar.\r\n\r\n~~~\r\n\r\npt1 = nesarc_data.groupby('TAB12MDX').size() * 100 / len(nesarc_data)\r\nprint(pt1)\r\n\r\n~~~\r\n\r\n##Console Window\r\n\r\nThe console window shows the commands, output and error messages. Run all of the code you have written. There should be no error messages in your console window.\r\n\r\nCommonly a variable name may be mistyped and this error shows in the console as KeyError: 'S3Ac3B1'\r\n\r\n![](./img/16.png)\r\n\r\nIf you do find errors then go back to your program and correct the errors, save the code and run again.\r\n\r\nOur variables names are a bit cryptic and thus we might want our print statements to be a bit more interpretable. The print function in our code is just asking for the text strings, we can change them to read however we would like. We can see that we added additional information as headers for each variable.\r\n\r\nFor variable TAB12MDX nicotine dependence in the past 12 months the code book tells us that one means yes and zero means no. We can see in our counts that we have 38,131 resondents that have no nicotine dependence, when we look at the percentages output that is  88.4% of the sample. While 4,962 or approximatley 11.5% of respondents do have a nicotine dependence.\r\n\r\n![](./img/17.png)\r\n\r\nWhen you scroll down to usual quantity when smoked cigarettes, S3AQ3C1, you find the values are displayed in an incorrect order. This is happening because Python is reading the values as strings or objects rather than as numeric because it encountered empty cells when reading the column for that variable. To correct this, we can add a line of code to our program converting the variable to numeric before calling on the value_counts function.\r\n\r\n~~~\r\n\r\nnesarc_data['S3AQ3C1'] = pandas.to_numeric(nesarc_data['S3AQ3C1'],errors='coerce')\r\n\r\n~~~\r\n\r\n\r\n\r\nThis line of code should come after the dataset is loaded and before the variable is used to produce output.\r\nAdd one of these lines for the S3AQ3C1 variable used in our program.\r\nNow set the sort option to True for each count and percentage then save and run your program. Each output should be displayed in order of the greatest count or percentage first going in descending order.\r\n\r\n\r\n\r\n##Tips\r\n\r\nRemember the importance of comments in all programming. Python is no different. The # symbol is used to comment out text and it is good practice to add a line of commentry to sections of your code explaining what each section is doing. They help to keep track of decisions you have made and actions you take.\r\n\r\nRemember to save each time you change your program.\r\n\r\nAdd commentry to your code now. They should appear in grey in your program.\r\n\r\nIt can be difficult to always type variable names in the correct case, some may be in upper case and others in lower case. Python is case sensitive so this can give your program unnecessary errors. You can use the map function to convert all variables in your dataframe to upper or lower case. Place this line of code just after you have loaded the data set.\r\n\r\n~~~\r\n\r\nnesarc_data.columns = map(str.upper, nesarc_data.columns)\r\nnesarc_data.columns = map(str.lower, nesarc_data.columns)\r\n\r\n~~~\r\n\r\nTo avoid run time error messages you can put the following set_option line of code in your program usually place it after you load the data set.\r\n\r\n~~~\r\n\r\npandas.set_option('display.float_format',lambda x:'%f'%x)\r\n\r\n~~~\r\n\r\nPandas documentation is available online for you to investigate futher options and settings for all the functions we use.\r\n\r\n<http://pandas.pydata.org/pandas-docs/version/0.20/api.html>\r\n"
    }
  
  ]
  }

